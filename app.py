import pandas as pd
import joblib
import streamlit as st
import os


import qiskit
print(qiskit.__version__)
# Determina o caminho do arquivo com base no diret√≥rio do script atual
base_dir = os.path.dirname(os.path.abspath(__file__))
# Caminhos dos modelos .pkl
caminho_modelo_classico = os.path.join(base_dir, 'infra', 'model_of_classical_machine_learning', 'modelo_anti_fraude.pkl')
caminho_modelo_quantico = os.path.join(base_dir, 'infra', 'model_of_quantum_machine_learning', 'modelo_anti_fraude_quantum.pkl')


# Carregar os modelos salvos
modelo_classico = joblib.load(caminho_modelo_classico)
modelo_quantico = joblib.load(caminho_modelo_quantico)

# Configura√ß√£o do estilo da p√°gina
st.set_page_config(page_title="Quantum Guard", page_icon="üí∞", layout="centered")
# Adicionar estilo CSS para limitar a altura e evitar rolagem


# Cabe√ßalho
st.markdown("<h1 style='font-size:24px; text-align: center; color: #6A5ACD; padding: 0rem'>Quantum Guard</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='font-size:18px; text-align: center; color: #6A5ACD;'>Classificador de Transa√ß√µes Financeiras de Transa√ß√µes Financeiras com Machine Learning Cl√°ssico e Qu√¢ntico</h4>", unsafe_allow_html=True)

modelo_selecionado = st.selectbox(
        "Escolha o modelo de classifica√ß√£o:",
        options=["Cl√°ssico", "Qu√¢ntico"]
    )
col1, col2, col3 = st.columns(3)



# Coluna 1
with col1:
    
    valor = st.number_input("Valor da transa√ß√£o (em R$):", min_value=0.0, value=100.0, format="%.2f")
    fim_de_semana = st.selectbox(
        "A transa√ß√£o foi no final de semana?", 
        options=[0, 1], 
        format_func=lambda x: "Sim" if x == 1 else "N√£o"
    )

# Coluna 2
with col2:    
    numero_transacoes = st.number_input("N√∫mero de transa√ß√µes no dia:", min_value=1, value=5)
    perfil = st.selectbox("Perfil do cliente:", options=["Aposentado", "Estudante", "N√£o Aposentado"])


# Coluna 3
with col3:
    tipo_transacao = st.selectbox("Tipo de transa√ß√£o:", options=["Compra", "Saque", "Transfer√™ncia"])
    cidade = st.selectbox("Cidade da transa√ß√£o:", options=[
        "S√£o Paulo", "Rio de Janeiro", "Belo Horizonte", "Bras√≠lia", "Salvador", 
        "Fortaleza", "Curitiba", "Manaus", "Recife", "Porto Alegre", 
        "Vit√≥ria", "Goi√¢nia", "Bel√©m", "S√£o Lu√≠s", "Macei√≥", 
        "Natal", "Campo Grande", "Jo√£o Pessoa", "Aracaju", "Teresina", 
        "Cuiab√°", "Macap√°", "Rio Branco", "Boa Vista", "Palmas", 
        "Florian√≥polis", "Porto Velho"
    ])
col4, col5 = st.columns(2)
with col4:
    idade_cliente = st.slider("Idade do cliente:", min_value=18, max_value=80, value=30)
with col5:
    tempo = st.slider(
            "Hora da transa√ß√£o (0-24h):",
            min_value=0.0,  # In√≠cio do intervalo
            max_value=24.0, # Fim do intervalo
            value=12.0,     # Valor inicial
            step=0.5        # Incremento de 30 minutos
        )

# Criar DataFrame com as entradas
novos_dados = pd.DataFrame([{
    "valor": valor,
    "tempo": tempo,
    "fim_de_semana": fim_de_semana,
    "idade_cliente": idade_cliente,
    "numero_transacoes": numero_transacoes,
    "tipo_transacao": tipo_transacao,
    "cidade": cidade,
    "perfil": perfil
}])

# Fun√ß√£o para realizar a classifica√ß√£o
def realizar_classificacao(modelo, dados):
    print(dados)
    return modelo.predict(dados)

# Bot√£o de classifica√ß√£o
if st.button("Classificar Transa√ß√£o"):
    try:
        # Escolher o modelo
        modelo_carregado = modelo_classico if modelo_selecionado == "Cl√°ssico" else modelo_quantico
        
        # Fazer a previs√£o
        previsao = realizar_classificacao(modelo_carregado, novos_dados)
        resultado = "Alto Risco de Fraude" if previsao[0] == 1 else "Baixo ou Sem Risco de Fraude"
        # Exibindo a mensagem com formata√ß√£o condicional
        if previsao[0] == 1:
            st.warning(f"A transa√ß√£o foi classificada como **{resultado}**.")
        else:
            st.success(f"A transa√ß√£o foi classificada como **{resultado}**.")
        
        # Exibir a acur√°cia do modelo
        if modelo_selecionado == "Cl√°ssico":
            st.info("Acur√°cia do modelo cl√°ssico: 97%")  # Atualize com a acur√°cia real
        else:
            st.info("Acur√°cia do modelo qu√¢ntico: 93%")  # Atualize com a acur√°cia real

    except Exception as e:
        st.error(f"Erro na classifica√ß√£o: {e}")

        # st.write("---")
st.markdown(
    """
    <div style='margin:0; padding:0px; text-align: center; color: gray;'>
        Desenvolvido por Weslley Rosa Prado<br>
        Orientador: Professor Doutor Jos√© Alexandre Nogueira<br>
        Projeto Pr√°tico Baseado no Trabalho de Conclus√£o de Curso de F√≠sica<br>
        Universidade Federal do Esp√≠rito Santo - UFES
    </div>
    """,
    unsafe_allow_html=True
)